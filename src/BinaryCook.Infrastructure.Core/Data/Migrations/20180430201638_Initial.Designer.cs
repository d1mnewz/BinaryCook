// <auto-generated />
using System;
using BinaryCook.Infrastructure.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

namespace BinaryCook.Infrastructure.Core.Data.Migrations
{
    [DbContext(typeof(BinaryCookDbContext))]
    [Migration("20180430201638_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("main")
                .HasAnnotation("ProductVersion", "2.1.0-preview2-30571")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BinaryCook.Core.Domain.Model.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Metadata_CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("Metadata_CreatedDateAtUtc");

                    b.Property<DateTime?>("Metadata_DeletedBy");

                    b.Property<DateTime?>("Metadata_DeletedDateAtUtc");

                    b.Property<string>("Metadata_UpdatedBy");

                    b.Property<DateTime?>("Metadata_UpdatedDateAtUtc");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Ingredient");
                });

            modelBuilder.Entity("BinaryCook.Core.Domain.Model.Recipe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Metadata_CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("Metadata_CreatedDateAtUtc");

                    b.Property<DateTime?>("Metadata_DeletedBy");

                    b.Property<DateTime?>("Metadata_DeletedDateAtUtc");

                    b.Property<string>("Metadata_UpdatedBy");

                    b.Property<DateTime?>("Metadata_UpdatedDateAtUtc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Recipe");
                });

            modelBuilder.Entity("BinaryCook.Core.Domain.Model.RecipeIngredient", b =>
                {
                    b.Property<Guid>("IngredientId");

                    b.Property<Guid>("RecipeId");

                    b.Property<bool>("IsDeleted");

                    b.HasKey("IngredientId", "RecipeId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeIngredient");
                });

            modelBuilder.Entity("BinaryCook.Core.Domain.Model.RecipeStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<double>("DurationInSeconds");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Metadata_CreatedBy")
                        .IsRequired();

                    b.Property<DateTime>("Metadata_CreatedDateAtUtc");

                    b.Property<DateTime?>("Metadata_DeletedBy");

                    b.Property<DateTime?>("Metadata_DeletedDateAtUtc");

                    b.Property<string>("Metadata_UpdatedBy");

                    b.Property<DateTime?>("Metadata_UpdatedDateAtUtc");

                    b.Property<int>("Priority");

                    b.Property<Guid>("RecipeId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeStep");
                });

            modelBuilder.Entity("BinaryCook.Core.Domain.Model.Recipe", b =>
                {
                    b.OwnsOne("BinaryCook.Core.Domain.Model.Common.Image", "Image", b1 =>
                        {
                            b1.Property<Guid?>("RecipeId");

                            b1.Property<string>("Original")
                                .HasMaxLength(512);

                            b1.Property<string>("Thumbnail")
                                .HasMaxLength(512);

                            b1.ToTable("Recipe");

                            b1.HasOne("BinaryCook.Core.Domain.Model.Recipe")
                                .WithOne("Image")
                                .HasForeignKey("BinaryCook.Core.Domain.Model.Common.Image", "RecipeId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("BinaryCook.Core.Domain.Model.RecipeIngredient", b =>
                {
                    b.HasOne("BinaryCook.Core.Domain.Model.Ingredient")
                        .WithMany("_recipes")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BinaryCook.Core.Domain.Model.Recipe")
                        .WithMany("_ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BinaryCook.Core.Domain.Model.RecipeStep", b =>
                {
                    b.HasOne("BinaryCook.Core.Domain.Model.Recipe")
                        .WithMany("_steps")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
